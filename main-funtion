const fs = require("fs");
const { ethers } = require("hardhat");
const axios = require("axios");
const FormData = require("form-data");
const readline = require("readline");
require("dotenv").config();

async function generateImageFromPrompt(prompt, outputPath) {
  const modelVersion = "7762fd07cf82c948538e41f63f77d685e02b063e37e496e96eefd46c929f9bdc"
  const REPLICATE_API_TOKEN = process.env.REPLICATE_API_TOKEN;
  if (!REPLICATE_API_TOKEN) {
    throw new Error("REPLICATE_API_TOKEN is not defined in .env file");
  }

  console.log(`Generating image with prompt: ${prompt}`);
  try {
    const res = await axios.post(
      "https://api.replicate.com/v1/predictions",
      {
        version: modelVersion,
        input: { prompt }
      },
      {
        headers: {
          "Authorization": `Token ${REPLICATE_API_TOKEN}`,
          "Content-Type": "application/json"
        }
      }
    );

    console.log("Prediction created:", res.data);
    const getUrl = res.data.urls.get;
    let outputUrl = null;
    for (let i = 0; i < 20; i++) {
      await new Promise(r => setTimeout(r, 4000));
      const outRes = await axios.get(getUrl, {
        headers: { "Authorization": `Token ${REPLICATE_API_TOKEN}` }
      });
      console.log(`Poll ${i + 1}: Status = ${outRes.data.status}`);
      if (outRes.data.status === "succeeded") {
        outputUrl = outRes.data.output[0];
        break;
      }
      if (outRes.data.status === "failed") throw new Error("Replicate: job failed!");
    }
    if (!outputUrl) throw new Error("Replicate: Generation timed out!");

    const img = await axios.get(outputUrl, { responseType: "arraybuffer" });
    fs.writeFileSync(`${outputPath}.png`, img.data);
    console.log("Đã tạo và lưu ảnh từ Replicate:", `${outputPath}.png`);
    return `${outputPath}.png`;
  } catch (e) {
    console.error("Lỗi khi tạo ảnh bằng Replicate:", e.response?.data || e.message);
    throw e;
  }
}

async function getInput(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer.trim());
    });
  });
}

async function isValidImageUrl(url) {
  try {
    const response = await axios.head(url, { timeout: 5000 });
    const mime = response.headers["content-type"];
    return mime && mime.startsWith("image/");
  } catch (e) {
    return false;
  }
}

async function downloadImageSmart(url, outputPath) {
  console.log(`Downloading image from URL: ${url}`);
  const response = await axios({
    url,
    method: "GET",
    responseType: "stream",
    validateStatus: null,
  });
  const mime = response.headers["content-type"];
  if (!mime || !mime.startsWith("image/")) {
    throw new Error(`URL không trỏ tới file ảnh! MIME type: ${mime || "unknown"}`);
  }
  let ext = mime.split("/")[1].split(";")[0];
  if (ext.includes("jpeg")) ext = "jpg";
  const finalPath = `${outputPath}.${ext}`;

  return new Promise((resolve, reject) => {
    const writer = fs.createWriteStream(finalPath);
    response.data.pipe(writer);
    writer.on("finish", () => {
      console.log(`Image downloaded to: ${finalPath}`);
      resolve(finalPath);
    });
    writer.on("error", (err) => {
      fs.unlink(finalPath, () => reject(err));
    });
  });
}

async function uploadToPinata(filePath) {
  const PINATA_API_KEY = process.env.PINATA_API_KEY;
  const PINATA_API_SECRET = process.env.PINATA_API_SECRET;
  if (!PINATA_API_KEY || !PINATA_API_SECRET) {
    throw new Error("PINATA_API_KEY or PINATA_API_SECRET is not defined in .env file");
  }
  console.log(`Uploading file to Pinata: ${filePath}`);
  const data = new FormData();
  data.append("file", fs.createReadStream(filePath));
  const res = await axios.post(
    "https://api.pinata.cloud/pinning/pinFileToIPFS",
    data,
    {
      maxBodyLength: Infinity,
      headers: {
        pinata_api_key: PINATA_API_KEY,
        pinata_secret_api_key: PINATA_API_SECRET,
        ...data.getHeaders(),
      },
    }
  );
  console.log(`File uploaded to Pinata, IPFS Hash: ${res.data.IpfsHash}`);
  return res.data.IpfsHash;
}

async function main() {
  if (!process.env.REPLICATE_API_TOKEN) {
    throw new Error("REPLICATE_API_TOKEN is not defined in .env file");
  }
  if (!process.env.PINATA_API_KEY || !process.env.PINATA_API_SECRET) {
    throw new Error("PINATA_API_KEY or PINATA_API_SECRET is not defined in .env file");
  }

  let tempFile;
  try {
    const choice = await getInput(
      "Bạn muốn nhập URL ảnh (1) hay tạo ảnh bằng AI (2)? Nhập 1 hoặc 2: "
    );
    let imageUrl;

    if (choice === "1") {
      let url = "";
      while (true) {
        url = await getInput("Nhập link ảnh NFT (jpg, png, gif...): ");
        if (!url) {
          console.log("URL không được để trống.");
          continue;
        }
        if (!/^https?:\/\//i.test(url)) {
          console.log("Link phải bắt đầu bằng http:// hoặc https://");
          continue;
        }
        if (!(await isValidImageUrl(url))) {
          console.log("Link không trỏ tới file ảnh hợp lệ. Vui lòng thử lại.");
          continue;
        }
        break;
      }
      try {
        tempFile = await downloadImageSmart(url, "./tmp_image");
      } catch (e) {
        console.error("Không thể tải hoặc xác nhận file ảnh từ URL:", e.message);
        throw e;
      }
    } else if (choice === "2") {
      const prompt = await getInput("Nhập prompt để tạo ảnh bằng AI: ");
      if (!prompt) {
        console.error("Prompt không được để trống khi tạo ảnh bằng AI.");
        throw new Error("Prompt cannot be empty");
      }
      tempFile = await generateImageFromPrompt(prompt, "./ai_generated_image");
    } else {
      console.error("Lựa chọn không hợp lệ. Vui lòng chọn 1 hoặc 2.");
      throw new Error("Invalid choice");
    }

    const name = await getInput("Nhập tên NFT: ");
    const description = await getInput("Nhập mô tả cho NFT: ");
    const promptText = choice === "2" ? await getInput("Xác nhận prompt AI (hoặc nhập mới): ") : await getInput("Nhập prompt AI gốc (nếu có, bỏ qua nếu không): ");

    let imageHash;
    try {
      imageHash = await uploadToPinata(tempFile);
      imageUrl = `https://gateway.pinata.cloud/ipfs/${imageHash}`;
    } catch (e) {
      console.error("Lỗi khi upload ảnh lên Pinata:", e.message);
      throw e;
    }

    const [deployer] = await ethers.getSigners();
    const userId = deployer.address;
    const createdAt = new Date().toISOString();
    const metadata = {
      name: name || "NFT từ link ảnh bất kỳ",
      description: description || (choice === "1" ? `Mint NFT tự động từ link: ${url}` : `NFT được tạo từ AI prompt`),
      image: imageUrl,
      prompt: promptText,
      user_id: userId,
      created_at: createdAt,
    };
    fs.writeFileSync("./metadata.json", JSON.stringify(metadata, null, 2));
    console.log("Đã tạo metadata JSON:", metadata);

    let metadataHash;
    try {
      metadataHash = await uploadToPinata("./metadata.json");
      console.log(`Đã upload metadata lên Pinata. IPFS Hash: ${metadataHash}`);
    } catch (e) {
      console.error("Lỗi khi upload metadata lên Pinata:", e.message);
      throw e;
    }
    const metadataUrl = `https://gateway.pinata.cloud/ipfs/${metadataHash}`;

    let contractAddress;
    try {
      const addressJson = JSON.parse(fs.readFileSync("./contract-address.json"));
      contractAddress = addressJson.address;
    } catch (e) {
      console.error("Lỗi khi đọc contract-address.json:", e.message);
      throw e;
    }

    let mintTxHash = "";
    try {
      const AIGenNFT = await ethers.getContractFactory("AIGenNFT");
      const nft = AIGenNFT.attach(contractAddress);
      const tx = await nft.connect(deployer).mint(metadataUrl);
      await tx.wait();
      mintTxHash = tx.hash;
      console.log("Đã mint NFT với tokenURI:", metadataUrl);
    } catch (e) {
      console.error("Lỗi khi mint NFT:", e.message);
      throw e;
    }

    const metaObj = {
      ...metadata,
      token_uri: metadataUrl,
      ipfs_hash: metadataHash,
      mint_tx_hash: mintTxHash,
    };
    let all = [];
    if (fs.existsSync("./all-metadata.json")) {
      try {
        all = JSON.parse(fs.readFileSync("./all-metadata.json"));
      } catch (e) {
        console.error("Lỗi khi đọc all-metadata.json cũ, tạo file mới.");
        all = [];
      }
    }
    all.push(metaObj);
    fs.writeFileSync("./all-metadata.json", JSON.stringify(all, null, 2));
    console.log("Đã cập nhật all-metadata.json:", metaObj);
  } finally {
    if (tempFile && fs.existsSync(tempFile)) {
      fs.unlinkSync(tempFile);
    }
    if (fs.existsSync("./metadata.json")) {
      fs.unlinkSync("./metadata.json");
    }
  }
}

main().catch((error) => {
  console.error("Lỗi trong quá trình thực thi:", error.message);
  process.exit(1);
});
